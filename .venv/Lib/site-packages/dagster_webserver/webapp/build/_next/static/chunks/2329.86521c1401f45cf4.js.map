{"version":3,"file":"static/chunks/2329.86521c1401f45cf4.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/LastRunSummary.tsx","webpack://_N_E/../ui-core/src/instance/StepSummaryForRun.tsx","webpack://_N_E/../ui-core/src/hooks/useQueryPersistedFilterState.tsx","webpack://_N_E/../ui-core/src/instance/JobMenu.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedJobRow.tsx","webpack://_N_E/../ui-components/src/components/HorizontalControls.tsx","webpack://_N_E/../ui-components/src/components/HoverButton.tsx","webpack://_N_E/../ui-components/src/components/ListItem.tsx","webpack://_N_E/../ui-core/src/workspace/SingleJobQuery.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedObserveJobRow.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/jobs/JobsPageContent.tsx","webpack://_N_E/../ui-core/src/jobs/JobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/runs/RunActionButtons.tsx","webpack://_N_E/../ui-core/src/runs/RunStatusPez.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useCodeLocationFilter.tsx","webpack://_N_E/../ui-components/src/components/css/HorizontalControls.module.css?aa33","webpack://_N_E/../ui-components/src/components/css/HoverButton.module.css?b90d","webpack://_N_E/../ui-components/src/components/css/ListItem.module.css?c417"],"sourcesContent":["import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport {memo, useMemo} from 'react';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary = memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}: Props) => {\n    const {status} = run;\n\n    const intent = useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {Caption, Colors} from '@dagster-io/ui-components';\nimport qs from 'qs';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const queryResult = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n  const {data} = queryResult;\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import qs from 'qs';\nimport {SetStateAction, useMemo} from 'react';\n\nimport {useQueryPersistedState} from './useQueryPersistedState';\n\ntype SetterType<T extends Record<string, any>, K extends keyof T & string> = {\n  [P in K as `set${Capitalize<P>}`]: (value: SetStateAction<T[P]>) => void;\n};\n\nexport const useQueryPersistedFilterState = <T extends Record<string, any>>(\n  filterFields: readonly (keyof T)[],\n): {\n  state: T;\n  setState: React.Dispatch<React.SetStateAction<T>>;\n  setters: SetterType<T, Extract<keyof T, string>>;\n} => {\n  const encode = (filters: T) => {\n    return filterFields.reduce((acc, field) => {\n      const value = filters[field];\n      acc[field] = value?.length\n        ? (JSON.stringify(value) as T[keyof T])\n        : (undefined as T[keyof T]);\n      return acc;\n    }, {} as T);\n  };\n\n  const decode = (qs: qs.ParsedQs) => {\n    const accum = {} as T;\n    for (const field of filterFields) {\n      const value = qs[field as string];\n      if (value && typeof value === 'string') {\n        try {\n          accum[field] = JSON.parse(value);\n        } catch {\n          accum[field] = [] as T[keyof T];\n        }\n      } else {\n        accum[field] = [] as T[keyof T];\n      }\n    }\n    return accum;\n  };\n\n  const [state, setState] = useQueryPersistedState<T>({\n    encode,\n    decode,\n  });\n\n  const createSetters = () => {\n    const setters = {} as SetterType<T, Extract<keyof T, string>>;\n\n    filterFields.forEach((field) => {\n      const fieldAsString = field as keyof T & string;\n      const key = `set${\n        fieldAsString.charAt(0).toUpperCase() + fieldAsString.slice(1)\n      }` as keyof SetterType<T, Extract<keyof T, string>>;\n\n      setters[key] = ((value: any) => {\n        setState((prevState: T) => ({\n          ...prevState,\n          [fieldAsString]: value instanceof Function ? value(prevState[fieldAsString]) : value,\n        }));\n      }) as any;\n    });\n\n    return setters;\n  };\n\n  const setters = useMemo(createSetters, [filterFields, setState]);\n\n  return {\n    state,\n    setState,\n    setters,\n  };\n};\n","import {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {useCallback} from 'react';\n\nimport {gql, useLazyQuery} from '../apollo-client';\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {useMaterializationAction} from '../assets/LaunchAssetExecutionButton';\nimport {EXECUTION_PLAN_TO_GRAPH_FRAGMENT} from '../gantt/toGraphQueryItems';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReexecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n  isAssetJob: boolean | 'loading';\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, isAssetJob, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const pipelineSelector = {\n    pipelineName: job.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const materialize = useMaterializationAction(job.name);\n  const reexecute = useJobReexecution();\n\n  const {\n    permissions: {canLaunchPipelineReexecution, canLaunchPipelineExecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, queryResult] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const {data} = queryResult;\n\n  const fetchIfPossible = useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n  const executeItem =\n    isAssetJob === 'loading' ? (\n      <MenuItem icon=\"execute\" text=\"Loading...\" disabled={true} />\n    ) : isAssetJob === true ? (\n      <MenuItem\n        icon={materialize.loading ? <Spinner purpose=\"caption-text\" /> : 'execute'}\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        onClick={(e) => materialize.onClick(pipelineSelector, e)}\n      />\n    ) : (\n      <MenuLink\n        icon=\"execute\"\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        to={workspacePipelinePath({\n          repoName: repoAddress.name,\n          repoLocation: repoAddress.location,\n          pipelineName: job.name,\n          isJob: job.isJob,\n          path: '/playground',\n        })}\n      />\n    );\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n      onClick={(e) =>\n        run ? reexecute.onClick(run, ReexecutionStrategy.ALL_STEPS, e.shiftKey) : undefined\n      }\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n      onClick={(e) =>\n        run ? reexecute.onClick(run, ReexecutionStrategy.FROM_FAILURE, e.shiftKey) : undefined\n      }\n    />\n  );\n\n  return (\n    <>\n      {materialize.launchpadElement}\n      {reexecute.launchpadElement}\n      <Popover\n        onOpened={() => fetchIfPossible()}\n        content={\n          <Menu>\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n              })}\n              icon=\"job\"\n              text=\"View job\"\n            />\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n                path: '/runs',\n              })}\n              icon=\"checklist\"\n              text=\"View all recent runs\"\n            />\n            {canLaunchPipelineExecution ? (\n              executeItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineExecution} display=\"block\">\n                {executeItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteAllItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteAllItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteFromFailureItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteFromFailureItem}\n              </Tooltip>\n            )}\n          </Menu>\n        }\n        position=\"bottom-left\"\n      >\n        <Button icon={<Icon name=\"more_horiz\" />} intent=\"none\" />\n      </Popover>\n    </>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        pipelineName\n        tags {\n          key\n          value\n        }\n        executionPlan {\n          artifactsPersisted\n          assetSelection\n          ...ExecutionPlanToGraphFragment\n        }\n      }\n    }\n  }\n  ${EXECUTION_PLAN_TO_GRAPH_FRAGMENT}\n`;\n","import {Box, MiddleTruncate, useDelayedState} from '@dagster-io/ui-components';\nimport {forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {CaptionText, LoadingOrNone} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/SingleJobQuery.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitchFragment';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitchFragment';\nimport {HeaderCell, HeaderRow, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  index: number;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n}\n\nexport const VirtualizedJobRow = forwardRef(\n  (props: JobRowProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {name, isJob, repoAddress, index} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n    const queryResult = useQuery<SingleJobQuery, SingleJobQueryVariables>(SINGLE_JOB_QUERY, {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n      skip: !shouldQuery,\n    });\n    useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n    const {data} = queryResult;\n    const pipeline =\n      data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n    const {schedules, sensors} = useMemo(() => {\n      if (pipeline) {\n        const {schedules, sensors} = pipeline;\n        return {schedules, sensors};\n      }\n      return {schedules: [], sensors: []};\n    }, [pipeline]);\n\n    const latestRuns = useMemo(() => {\n      if (pipeline) {\n        const {runs} = pipeline;\n        if (runs.length) {\n          return [...runs];\n        }\n      }\n      return [];\n    }, [pipeline]);\n\n    return (\n      <div data-index={index} ref={ref}>\n        <RowGrid border=\"bottom\">\n          <RowCell>\n            <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </div>\n            <CaptionText>{pipeline?.description || ''}</CaptionText>\n          </RowCell>\n          <RowCell>\n            {schedules.length || sensors.length ? (\n              <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n                <ScheduleSensorTagContainer>\n                  <ScheduleOrSensorTag\n                    schedules={schedules}\n                    sensors={sensors}\n                    repoAddress={repoAddress}\n                  />\n                </ScheduleSensorTagContainer>\n              </Box>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {latestRuns[0] ? (\n              <LastRunSummary\n                run={latestRuns[0]}\n                showButton={false}\n                showHover\n                showSummary={false}\n                name={name}\n              />\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {latestRuns.length ? (\n              <Box padding={{top: 4}}>\n                <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n              </Box>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n              <JobMenu\n                job={{name, isJob, runs: latestRuns}}\n                isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n                repoAddress={repoAddress}\n              />\n            </Box>\n          </RowCell>\n        </RowGrid>\n      </div>\n    );\n  },\n);\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp5-popover-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {ReactNode} from 'react';\n\nimport {Box} from './Box';\nimport styles from './css/HorizontalControls.module.css';\n\ntype Control = {key: string; control: ReactNode};\n\ninterface Props {\n  controls: Control[];\n}\n\nexport const HorizontalControls = ({controls}: Props) => {\n  return (\n    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}} className={styles.container}>\n      {controls.map(({key, control}) =>\n        control ? (\n          <div key={key} className={styles.item}>\n            {control}\n          </div>\n        ) : null,\n      )}\n    </Box>\n  );\n};\n","import {ComponentProps} from 'react';\n\nimport {UnstyledButton} from './UnstyledButton';\nimport styles from './css/HoverButton.module.css';\n\nexport const HoverButton = (props: ComponentProps<typeof UnstyledButton>) => {\n  return <UnstyledButton {...props} className={styles.button} />;\n};\n","import {ChangeEvent, HTMLProps, ReactNode, forwardRef} from 'react';\n\nimport {Checkbox} from './Checkbox';\nimport styles from './css/ListItem.module.css';\n\ninterface Props {\n  index: number;\n  checked?: boolean;\n  onToggle?: (checked: boolean) => void;\n  href: string;\n  renderLink: (props: HTMLProps<HTMLAnchorElement>) => ReactNode;\n  left: ReactNode;\n  right: ReactNode;\n}\n\nconst defaultRenderLink = ({href, ...props}: HTMLProps<HTMLAnchorElement>): ReactNode => (\n  <a href={href} {...props} />\n);\n\nexport const ListItem = forwardRef<HTMLDivElement, Props>(\n  ({index, checked = false, onToggle, href, renderLink, left, right}, ref) => {\n    const link = renderLink ?? defaultRenderLink;\n    return (\n      <div className={styles.listItem} data-index={index} ref={ref}>\n        {onToggle ? (\n          <div className={styles.checkboxContainer}>\n            <Checkbox\n              format=\"check\"\n              checked={checked}\n              size=\"small\"\n              onChange={(e: ChangeEvent<HTMLInputElement>) => onToggle(e.target.checked)}\n            />\n          </div>\n        ) : null}\n        {link({href, className: styles.listItemAnchor, children: left})}\n        <div className={styles.right}>{right}</div>\n      </div>\n    );\n  },\n);\n","import {gql} from '../apollo-client';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitchFragment';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitchFragment';\n\nexport const SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {\n  Box,\n  Colors,\n  HorizontalControls,\n  HoverButton,\n  Icon,\n  ListItem,\n  MiddleTruncate,\n  Popover,\n  Skeleton,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport {forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {SINGLE_JOB_QUERY} from './SingleJobQuery';\nimport {TimeFromNow} from '../ui/TimeFromNow';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/SingleJobQuery.types';\nimport {JobMenu} from '../instance/JobMenu';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay, RunStatusPezList} from '../runs/RunStatusPez';\nimport {buildPipelineSelector} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {ScheduleSwitchFragment} from '../schedules/types/ScheduleSwitchFragment.types';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {SensorSwitchFragment} from '../sensors/types/SensorSwitchFragment.types';\n\ndayjs.extend(relativeTime);\n\ninterface JobRowProps {\n  index: number;\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n}\n\nexport const VirtualizedObserveJobRow = forwardRef(\n  (props: JobRowProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {index, name, isJob, repoAddress} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n    const queryResult = useQuery<SingleJobQuery, SingleJobQueryVariables>(SINGLE_JOB_QUERY, {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n      skip: !shouldQuery,\n    });\n    useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n    const {data} = queryResult;\n    const pipeline =\n      data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n    const {schedules, sensors} = useMemo(() => {\n      if (pipeline) {\n        const {schedules, sensors} = pipeline;\n        return {schedules, sensors};\n      }\n      return {schedules: [], sensors: []};\n    }, [pipeline]);\n\n    const latestRuns = useMemo(() => {\n      if (pipeline) {\n        const {runs} = pipeline;\n        if (runs.length) {\n          return [...runs];\n        }\n      }\n      return [];\n    }, [pipeline]);\n\n    const right = () => {\n      if (queryResult.loading && !queryResult.data) {\n        return <Skeleton $width={200} $height={24} />;\n      }\n\n      return (\n        <HorizontalControls\n          controls={[\n            {\n              key: 'latest-run',\n              control: latestRuns[0]?.startTime ? (\n                <Popover\n                  key={latestRuns[0].id}\n                  position=\"top\"\n                  interactionKind=\"hover\"\n                  content={\n                    <div>\n                      <RunStatusOverlay run={latestRuns[0]} name={name} />\n                    </div>\n                  }\n                  hoverOpenDelay={100}\n                >\n                  <HoverButton>\n                    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n                      <RunStatusIndicator status={latestRuns[0].status} />\n                      <TimeFromNow unixTimestamp={latestRuns[0].startTime} />\n                    </Box>\n                  </HoverButton>\n                </Popover>\n              ) : null,\n            },\n            {\n              key: 'schedules',\n              control:\n                schedules.length > 0 ? (\n                  <AutomationButton\n                    type=\"schedule\"\n                    enabled={schedules.some(\n                      (schedule) => schedule.scheduleState.status === 'RUNNING',\n                    )}\n                    automations={schedules}\n                    repoAddress={repoAddress}\n                  />\n                ) : null,\n            },\n            {\n              key: 'sensors',\n              control:\n                sensors.length > 0 ? (\n                  <AutomationButton\n                    type=\"sensor\"\n                    enabled={sensors.some((sensor) => sensor.sensorState.status === 'RUNNING')}\n                    automations={sensors}\n                    repoAddress={repoAddress}\n                  />\n                ) : null,\n            },\n            {\n              key: 'automations',\n              control:\n                sensors.length === 0 && schedules.length === 0 ? (\n                  <Tooltip content=\"No automations\" placement=\"top\">\n                    <AutomationButton type=\"none\" />\n                  </Tooltip>\n                ) : null,\n            },\n            {\n              key: 'runs',\n              control: (\n                <Box padding={{horizontal: 8}}>\n                  <RunStatusPezList\n                    jobName={name}\n                    runs={[...latestRuns].reverse()}\n                    fade\n                    forceCount={5}\n                  />\n                </Box>\n              ),\n            },\n            {\n              key: 'menu',\n              control: (\n                <JobMenu\n                  job={{name, isJob, runs: latestRuns}}\n                  isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n                  repoAddress={repoAddress}\n                />\n              ),\n            },\n          ]}\n        />\n      );\n    };\n\n    return (\n      <ListItem\n        ref={ref}\n        index={index}\n        href={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}\n        renderLink={({href, ...props}) => <Link to={href || '#'} {...props} />}\n        left={\n          <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <Icon name=\"job\" />\n              {name}\n            </Box>\n            {pipeline?.description ? (\n              <Tooltip\n                content={<div style={{width: 320}}>{pipeline.description}</div>}\n                placement=\"top\"\n              >\n                <Icon name=\"info\" color={Colors.textLight()} />\n              </Tooltip>\n            ) : null}\n          </Box>\n        }\n        right={right()}\n      />\n    );\n  },\n);\n\ntype AutomationType = 'sensor' | 'schedule' | 'none';\n\ninterface AutomationButtonProps {\n  type: AutomationType;\n  enabled?: boolean;\n  automations?: ScheduleSwitchFragment[] | SensorSwitchFragment[];\n  repoAddress?: RepoAddress;\n}\n\nconst AutomationButton = ({type, automations, enabled, repoAddress}: AutomationButtonProps) => {\n  const icon = () => {\n    if (type === 'none') {\n      return <Icon name=\"status\" color={Colors.accentGray()} />;\n    }\n\n    return <Icon name={type} color={enabled ? Colors.accentGreen() : Colors.accentGray()} />;\n  };\n\n  const button = (\n    <HoverButton>\n      <Box padding={{vertical: 2}}>{icon()}</Box>\n    </HoverButton>\n  );\n\n  if (type === 'none') {\n    return button;\n  }\n\n  const count = automations?.length || 0;\n  const headerText =\n    type === 'sensor'\n      ? count === 1\n        ? '1 sensor'\n        : `${count} sensors`\n      : count === 1\n        ? '1 schedule'\n        : `${count} schedules`;\n\n  return (\n    <Popover\n      position=\"top\"\n      interactionKind=\"hover\"\n      content={\n        <Box\n          flex={{direction: 'column'}}\n          style={{width: 320, overflowX: 'hidden'}}\n          background={Colors.backgroundLighter()}\n        >\n          <Box\n            flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n            padding={{vertical: 12, horizontal: 12}}\n            border=\"bottom\"\n          >\n            <strong style={{fontSize: 14}}>{headerText}</strong>\n          </Box>\n          <div style={{overflowY: 'auto', maxHeight: 240}}>\n            {automations?.length && repoAddress ? (\n              automations.map((automation, ii) => {\n                const displayName =\n                  automation.__typename === 'Sensor'\n                    ? automation.name\n                    : humanCronString(automation.cronSchedule, {\n                        longTimezoneName: automation.executionTimezone || 'UTC',\n                      });\n                return (\n                  <Box\n                    key={automation.id + '-' + ii}\n                    flex={{\n                      direction: 'row',\n                      gap: 12,\n                      alignItems: 'center',\n                      justifyContent: 'space-between',\n                    }}\n                    padding={12}\n                    border={ii === 0 ? null : 'top'}\n                  >\n                    <Box\n                      flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                      style={{width: '100%', overflow: 'hidden'}}\n                    >\n                      <Icon name={automation.__typename === 'Schedule' ? 'schedule' : 'sensor'} />\n                      <Link\n                        to={workspacePathFromAddress(\n                          repoAddress,\n                          automation.__typename === 'Schedule'\n                            ? `/schedules/${automation.name}`\n                            : `/sensors/${automation.name}`,\n                        )}\n                        style={{flex: 1, overflow: 'hidden', width: '100%'}}\n                      >\n                        <MiddleTruncate text={displayName} />\n                      </Link>\n                    </Box>\n                    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n                      {automation.__typename === 'Schedule' ? (\n                        <ScheduleSwitch schedule={automation} repoAddress={repoAddress} />\n                      ) : (\n                        <SensorSwitch sensor={automation} repoAddress={repoAddress} />\n                      )}\n                    </Box>\n                  </Box>\n                );\n              })\n            ) : (\n              <div>No automations</div>\n            )}\n          </div>\n        </Box>\n      }\n      hoverOpenDelay={100}\n    >\n      {button}\n    </Popover>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {useFeatureFlags} from '../app/Flags';\nimport {Container, Inner, TABLE_HEADER_HEIGHT} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {VirtualizedObserveJobRow} from '../workspace/VirtualizedObserveJobRow';\nimport {DynamicRepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const {flagUseNewObserveUIs} = useFeatureFlags();\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? TABLE_HEADER_HEIGHT : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        {flagUseNewObserveUIs ? null : <VirtualizedJobHeader />}\n        <Inner $totalHeight={totalHeight}>\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              transform: `translateY(${items[0]?.start ?? 0}px)`,\n            }}\n          >\n            {items.map(({index, key}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n\n              if (type === 'header') {\n                return (\n                  <DynamicRepoRow\n                    key={key}\n                    repoAddress={row.repoAddress}\n                    ref={rowVirtualizer.measureElement}\n                    index={index}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                        placement=\"top\"\n                      >\n                        <Tag>{row.jobCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              if (flagUseNewObserveUIs) {\n                return (\n                  <VirtualizedObserveJobRow\n                    key={key}\n                    index={index}\n                    ref={rowVirtualizer.measureElement}\n                    name={row.name}\n                    isJob={row.isJob}\n                    repoAddress={row.repoAddress}\n                  />\n                );\n              }\n\n              return (\n                <VirtualizedJobRow\n                  key={key}\n                  index={index}\n                  ref={rowVirtualizer.measureElement}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                />\n              );\n            })}\n          </div>\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {\n  Box,\n  Colors,\n  Icon,\n  NonIdealState,\n  Spinner,\n  SpinnerWithText,\n} from '@dagster-io/ui-components';\nimport {useCallback, useContext, useMemo} from 'react';\n\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useQueryPersistedFilterState} from '../hooks/useQueryPersistedFilterState';\nimport {TruncatedTextWithFullTextOnHover} from '../nav/getLeftNavItemsForOption';\nimport {OverviewJobsTable} from '../overview/OverviewJobsTable';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {useFilters} from '../ui/BaseFilters/useFilters';\nimport {useStaticSetFilter} from '../ui/BaseFilters/useStaticSetFilter';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {Tag} from '../ui/Filters/useDefinitionTagFilter';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {\n  WorkspaceLocationNodeFragment,\n  WorkspacePipelineFragment,\n} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst FILTER_FIELDS = ['jobs', 'tags', 'codeLocations'] as const;\n\nexport const JobsPageContent = () => {\n  const {allRepos, visibleRepos, loading, data: cachedData} = useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(cachedEntries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, visibleRepos]);\n\n  const allJobs = useMemo(() => repoBuckets.flatMap((bucket) => bucket.jobs), [repoBuckets]);\n\n  const {state: _state, setters} = useQueryPersistedFilterState<{\n    jobs: string[];\n    tags: Tag[];\n    codeLocations: RepoAddress[];\n  }>(FILTER_FIELDS);\n\n  const state = useMemo(() => {\n    return {\n      ..._state,\n      codeLocations: _state.codeLocations.map(({name, location}) =>\n        buildRepoAddress(name, location),\n      ),\n    };\n  }, [_state]);\n\n  const codeLocationFilter = useCodeLocationFilter({\n    codeLocations: state.codeLocations,\n    setCodeLocations: setters.setCodeLocations,\n  });\n\n  const jobFilter = useStaticSetFilter<string>({\n    name: 'Job',\n    icon: 'job',\n    allValues: useMemo(\n      () =>\n        allJobs.map((job) => ({\n          key: job.name,\n          value: job.name,\n          match: [job.name],\n        })),\n      [allJobs],\n    ),\n    renderLabel: ({value}) => (\n      <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n        <Icon name=\"job\" />\n        <TruncatedTextWithFullTextOnHover text={value} />\n      </Box>\n    ),\n    getStringValue: (x) => x,\n    state: state.jobs,\n    onStateChanged: useCallback(\n      (values) => {\n        setters.setJobs(Array.from(values));\n      },\n      [setters],\n    ),\n  });\n\n  const filters = useMemo(() => [codeLocationFilter, jobFilter], [codeLocationFilter, jobFilter]);\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const filteredRepoBuckets = useMemo(() => {\n    return repoBuckets\n      .filter((bucket) => {\n        return !state.codeLocations.length || state.codeLocations.includes(bucket.repoAddress);\n      })\n      .map((bucket) => ({\n        ...bucket,\n        jobs: bucket.jobs.filter((job) => {\n          if (state.jobs.length && !state.jobs.includes(job.name)) {\n            return false;\n          }\n          return true;\n        }),\n      }))\n      .filter((bucket) => !!bucket.jobs.length);\n  }, [repoBuckets, state]);\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredRepoBuckets.length) {\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              repoBuckets.length\n                ? 'No jobs were found that match your filters'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredRepoBuckets} />;\n  };\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 8}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between', grow: 0}}\n        border=\"bottom\"\n      >\n        {filterButton}\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64} flex={{direction: 'row', justifyContent: 'center'}}>\n          <SpinnerWithText label=\"Loading jobs…\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: WorkspacePipelineFragment[];\n};\n\nconst buildBuckets = (\n  locationEntries: Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines.filter(({name}) => !isHiddenAssetGroupJob(name));\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\n\nimport {JobsPageContent} from './JobsPageContent';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const JobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Jobs');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>Jobs</Heading>} />\n      <JobsPageContent />\n    </Box>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default JobsRoot;\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {Box, Button, Group, Icon} from '@dagster-io/ui-components';\nimport {useCallback, useState} from 'react';\n\nimport {IRunMetadataDict, IStepState} from './RunMetadataProvider';\nimport {doneStatuses, failedStatuses} from './RunStatuses';\nimport {DagsterTag} from './RunTag';\nimport {getReexecutionParamsForSelection} from './RunUtils';\nimport {StepSelection} from './StepSelection';\nimport {TerminationDialog, TerminationDialogResult} from './TerminationDialog';\nimport {RunFragment, RunPageFragment} from './types/RunFragments.types';\nimport {useJobAvailabilityErrorForRun} from './useJobAvailabilityErrorForRun';\nimport {useJobReexecution} from './useJobReExecution';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useFeatureFlags} from '../app/Flags';\nimport {GraphQueryItem, filterByQuery} from '../app/GraphQueryImpl';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {LaunchButtonConfiguration, LaunchButtonDropdown} from '../launchpad/LaunchButton';\nimport {filterRunSelectionByQuery} from '../run-selection/AntlrRunSelection';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\ninterface RunActionButtonsProps {\n  run: RunPageFragment;\n  selection: StepSelection;\n  graph: GraphQueryItem[];\n  metadata: IRunMetadataDict;\n}\n\nexport const CancelRunButton = ({run}: {run: RunFragment}) => {\n  const {id: runId, canTerminate} = run;\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n  const closeDialog = useCallback(() => setShowDialog(false), []);\n\n  const onComplete = useCallback(\n    async (result: TerminationDialogResult) => {\n      const {errors} = result;\n      const error = runId && errors[runId];\n      if (error && 'message' in error) {\n        await showSharedToaster({\n          message: error.message,\n          icon: 'error',\n          intent: 'danger',\n        });\n      }\n    },\n    [runId],\n  );\n\n  if (!runId) {\n    return null;\n  }\n\n  return (\n    <>\n      <Button\n        icon={<Icon name=\"cancel\" />}\n        intent=\"danger\"\n        disabled={showDialog}\n        onClick={() => setShowDialog(true)}\n      >\n        Terminate\n      </Button>\n      <TerminationDialog\n        isOpen={showDialog}\n        onClose={closeDialog}\n        onComplete={onComplete}\n        selectedRuns={{[runId]: canTerminate}}\n      />\n    </>\n  );\n};\n\nfunction stepSelectionWithState(selection: StepSelection, metadata: IRunMetadataDict) {\n  const stepStates = selection.keys.map(\n    (key) => (key && metadata.steps[key]?.state) || IStepState.PREPARING,\n  );\n\n  return {\n    ...selection,\n    present: selection.keys.length > 0,\n    failed: selection.keys.length && stepStates.includes(IStepState.FAILED),\n    finished: stepStates.every((stepState) =>\n      [IStepState.FAILED, IStepState.SUCCEEDED].includes(stepState),\n    ),\n  };\n}\n\nfunction stepSelectionFromRunTags(\n  run: RunFragment,\n  graph: GraphQueryItem[],\n  metadata: IRunMetadataDict,\n) {\n  const tag = run.tags.find((t) => t.key === DagsterTag.StepSelection);\n  if (!tag) {\n    return null;\n  }\n  return stepSelectionWithState(\n    {keys: filterByQuery(graph, tag.value).all.map((k) => k.name), query: tag.value},\n    metadata,\n  );\n}\n\nexport const canRunAllSteps = (run: Pick<RunFragment, 'status'>) => doneStatuses.has(run.status);\nexport const canRunFromFailure = (run: Pick<RunFragment, 'status' | 'executionPlan'>) =>\n  run.executionPlan && failedStatuses.has(run.status);\n\nexport const RunActionButtons = (props: RunActionButtonsProps) => {\n  const {metadata, graph, run} = props;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const jobError = useJobAvailabilityErrorForRun(run);\n  const {flagAssetRetries} = useFeatureFlags();\n\n  const artifactsPersisted = run?.executionPlan?.artifactsPersisted;\n\n  const selection = stepSelectionWithState(props.selection, metadata);\n  const currentRunSelection = stepSelectionFromRunTags(run, graph, metadata);\n  const currentRunIsFromFailure = run.tags?.some(\n    (t) => t.key === DagsterTag.IsResumeRetry && t.value === 'true',\n  );\n\n  const reexecute = useJobReexecution();\n  const reexecuteWithSelection = async (selection: StepSelection) => {\n    if (!run || !repoMatch || !run.pipelineSnapshotId) {\n      return;\n    }\n    const executionParams = getReexecutionParamsForSelection({\n      run,\n      selection,\n      repositoryLocationName: repoMatch.match.repositoryLocation.name,\n      repositoryName: repoMatch.match.repository.name,\n    });\n    await reexecute.onClick(run, executionParams, false);\n  };\n\n  const full: LaunchButtonConfiguration = {\n    icon: 'cached',\n    scope: '*',\n    title: 'All steps in root run',\n    tooltip: 'Re-execute the pipeline run from scratch. Shift-click to adjust tags.',\n    disabled: !canRunAllSteps(run),\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.ALL_STEPS, e.shiftKey),\n  };\n\n  const same: LaunchButtonConfiguration = {\n    icon: 'linear_scale',\n    scope: currentRunSelection?.query || '*',\n    title: 'Same steps',\n    disabled: !currentRunSelection || !(currentRunSelection.finished || currentRunSelection.failed),\n    tooltip: (\n      <div>\n        {!currentRunSelection || !currentRunSelection.present\n          ? 'Re-executes the same step subset used for this run if one was present.'\n          : !currentRunSelection.finished\n            ? 'Wait for all of the steps to finish to re-execute the same subset.'\n            : 'Re-execute the same step subset used for this run:'}\n        <StepSelectionDescription selection={currentRunSelection} />\n      </div>\n    ),\n    onClick: () => reexecuteWithSelection(currentRunSelection!),\n  };\n\n  const selected: LaunchButtonConfiguration = {\n    icon: 'op',\n    scope: selection.query,\n    title: selection.keys.length > 1 ? 'Selected steps' : 'Selected step',\n    disabled: !selection.present || !(selection.finished || selection.failed),\n    tooltip: (\n      <div>\n        {!selection.present\n          ? 'Select a step or type a step subset to re-execute.'\n          : !selection.finished\n            ? 'Wait for the steps to finish to re-execute them.'\n            : 'Re-execute the selected steps with existing configuration:'}\n        <StepSelectionDescription selection={selection} />\n      </div>\n    ),\n    onClick: () => reexecuteWithSelection(selection),\n  };\n\n  const fromSelected: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From selected',\n    disabled: !canRunAllSteps(run) || selection.keys.length !== 1,\n    tooltip: 'Re-execute the pipeline downstream from the selected steps.',\n    onClick: async () => {\n      if (!run.executionPlan) {\n        console.warn('Run execution plan must be present to launch from-selected execution');\n        return Promise.resolve();\n      }\n\n      const selectionForPythonFiltering = selection.keys.map((k) => `${k}*`).join(',');\n      const selectionForUIFiltering = selection.keys.map((k) => `name:\"${k}\"+`).join(' or ');\n\n      const selectionKeys = filterRunSelectionByQuery(graph, selectionForUIFiltering).all.map(\n        (node) => node.name,\n      );\n\n      await reexecuteWithSelection({\n        keys: selectionKeys,\n        query: selectionForPythonFiltering,\n      });\n    },\n  };\n\n  const fromFailureEnabled = canRunFromFailure(run);\n\n  const fromFailure: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From failure',\n    disabled: !fromFailureEnabled,\n    tooltip: !fromFailureEnabled\n      ? 'Retry is only enabled when the pipeline has failed.'\n      : 'Retry the pipeline run, skipping steps that completed successfully. Shift-click to adjust tags.',\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.FROM_FAILURE, e.shiftKey),\n  };\n\n  const fromAssetFailure: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From asset failure',\n    disabled: !fromFailureEnabled,\n    tooltip: !fromFailureEnabled\n      ? 'Retry is only enabled when the pipeline has failed.'\n      : 'Retry the pipeline run, selecting only assets that did not complete successfully. Shift-click to adjust tags.',\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.FROM_ASSET_FAILURE, e.shiftKey),\n  };\n\n  if (!artifactsPersisted) {\n    [selected, same, fromFailure, fromSelected].forEach((option) => {\n      option.disabled = true;\n      option.title =\n        'Retry and re-execute are only enabled on persistent storage. Try rerunning with a different storage configuration.';\n    });\n  }\n\n  const options = [\n    full,\n    same,\n    selected,\n    fromSelected,\n    fromFailure,\n    flagAssetRetries && run.executionPlan?.assetSelection.length ? fromAssetFailure : null,\n  ].filter(Boolean) as LaunchButtonConfiguration[];\n  const preferredRerun = selection.present\n    ? selected\n    : fromFailureEnabled && currentRunIsFromFailure\n      ? fromFailure\n      : currentRunSelection?.present\n        ? same\n        : null;\n\n  const primary = artifactsPersisted && preferredRerun ? preferredRerun : full;\n\n  const tooltip = () => {\n    if (jobError?.tooltip) {\n      return jobError?.tooltip;\n    }\n    return run.hasReExecutePermission ? undefined : DEFAULT_DISABLED_REASON;\n  };\n\n  return (\n    <Group direction=\"row\" spacing={8}>\n      <Box flex={{direction: 'row'}}>\n        <LaunchButtonDropdown\n          runCount={1}\n          primary={primary}\n          options={options}\n          title={\n            primary.scope === '*'\n              ? `Re-execute all (*)`\n              : primary.scope\n                ? `Re-execute (${primary.scope})`\n                : `Re-execute ${primary.title}`\n          }\n          tooltip={tooltip()}\n          icon={jobError?.icon}\n          disabled={jobError?.disabled || !run.hasReExecutePermission}\n        />\n      </Box>\n      {!doneStatuses.has(run.status) ? <CancelRunButton run={run} /> : null}\n      {reexecute.launchpadElement}\n    </Group>\n  );\n};\n\nconst StepSelectionDescription = ({selection}: {selection: StepSelection | null}) => (\n  <div style={{paddingLeft: '10px'}}>\n    {(selection?.keys || []).map((step) => (\n      <span key={step} style={{display: 'block'}}>{`* ${step}`}</span>\n    ))}\n  </div>\n);\n","import {Box, CaptionMono, Colors, FontFamily, Popover} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n  forceCount?: number;\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs, forceCount} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n\n  let items: (RunTimeFragment | null)[] = [...runs];\n  if (forceCount) {\n    if (forceCount > items.length) {\n      items.unshift(...Array(forceCount - items.length).fill(null));\n    } else {\n      items = items.slice(0, forceCount);\n    }\n  }\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {items.map((run, ii) => {\n        const opacity = fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0;\n        if (!run) {\n          return <Pez key={`empty-${ii}`} $color={Colors.backgroundLighter()} $opacity={opacity} />;\n        }\n\n        return (\n          <Popover\n            key={run.id}\n            position=\"top\"\n            interactionKind=\"hover\"\n            content={\n              <div>\n                <RunStatusOverlay run={run} name={jobName} />\n              </div>\n            }\n            hoverOpenDelay={100}\n          >\n            <RunStatusPez key={run.id} runId={run.id} status={run.status} opacity={opacity} />\n          </Popover>\n        );\n      })}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.id}`}>\n            <CaptionMono>{titleForRun(run)}</CaptionMono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 240px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.keylineDefault()};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.textDefault()};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n","import {useCallback, useContext, useMemo} from 'react';\n\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {WorkspaceContext} from '../../workspace/WorkspaceContext/WorkspaceContext';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\nimport {StaticBaseConfig, useStaticSetFilter} from '../BaseFilters/useStaticSetFilter';\n\ntype Props =\n  | {\n      codeLocations: RepoAddress[];\n      setCodeLocations: (repos: RepoAddress[]) => void;\n    }\n  | {\n      codeLocations: undefined;\n      setCodeLocations: undefined;\n    };\n\n/**\n * If props are passed that this filter is in \"controlled mode\" (you tell it what the current state is)\n *\n * Otherwise it's uncontrolled and uses WorkspaceContext to control the current state\n * This means that any logic depending on the state of this filter would need to read\n * WorkspaceContext to get the current state.\n */\nexport const useCodeLocationFilter = (\n  {codeLocations, setCodeLocations}: Props = {\n    codeLocations: undefined,\n    setCodeLocations: undefined,\n  },\n) => {\n  const {allRepos, visibleRepos, setVisible, setHidden} = useContext(WorkspaceContext);\n\n  const allRepoAddresses = useMemo(() => {\n    return allRepos.map((repo) =>\n      buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n    );\n  }, [allRepos]);\n\n  const visibleRepoAddresses = useMemo(() => {\n    return visibleRepos.length === allRepos.length\n      ? []\n      : visibleRepos.map((repo) =>\n          buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n        );\n  }, [allRepos, visibleRepos]);\n\n  const setVisibleRepos = useCallback(\n    (state: Set<RepoAddress>) => {\n      if (state.size === 0) {\n        setVisible(allRepoAddresses);\n        return;\n      }\n\n      const hidden = allRepoAddresses.filter((repoAddress) => !state.has(repoAddress));\n      setHidden(hidden);\n      setVisible(Array.from(state));\n    },\n    [allRepoAddresses, setHidden, setVisible],\n  );\n\n  return useStaticSetFilter<RepoAddress>({\n    state: codeLocations ? codeLocations : visibleRepoAddresses,\n    allValues: useMemo(\n      () =>\n        allRepoAddresses.map((repoAddress) => {\n          return {value: repoAddress, match: [repoAddressAsHumanString(repoAddress)]};\n        }),\n      [allRepoAddresses],\n    ),\n    onStateChanged: (state) => {\n      if (setCodeLocations) {\n        setCodeLocations(Array.from(state));\n      } else {\n        setVisibleRepos(state);\n      }\n    },\n    menuWidth: '500px',\n    ...BaseConfig,\n  });\n};\n\nconst getStringValue = (value: RepoAddress) => repoAddressAsHumanString(value);\n\nexport const BaseConfig: StaticBaseConfig<RepoAddress> = {\n  name: 'Code location',\n  icon: 'folder',\n  renderLabel: ({value}: {value: RepoAddress}) => (\n    <TruncatedTextWithFullTextOnHover text={repoAddressAsHumanString(value)} />\n  ),\n  getStringValue,\n  getKey: getStringValue,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"HorizontalControls_container__kalME\",\"item\":\"HorizontalControls_item__n78mr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"HoverButton_button__q9NSN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ListItem_listItem__hJcWe\",\"listItemAnchor\":\"ListItem_listItemAnchor__kz7bK\",\"checkboxContainer\":\"ListItem_checkboxContainer__iSFou\",\"left\":\"ListItem_left__euMlC\",\"right\":\"ListItem_right__IUgkP\"};"],"names":["LastRunSummary","memo","name","run","showHover","showButton","showSummary","param","status","intent","useMemo","RunStatus","SUCCESS","CANCELED","CANCELING","FAILURE","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Box","flex","direction","justifyContent","alignItems","gap","tag","tagElement","jsx","Tag","RunStatusIndicator","size","RunTime","Popover","position","interactionKind","content","div","RunStatusOverlay","hoverOpenDelay","RunStateSummary","failedStatuses","has","inProgressStatuses","StepSummaryForRun","runId","id","undefined","AnchorButton","to","concat","props","data","useQuery","STEP_SUMMARY_FOR_RUN_QUERY","variables","pipelineRunOrError","__typename","relevantSteps","stepStats","filter","step","StepEventStatus","IN_PROGRESS","stepCount","length","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","Caption","color","Colors","Link","stepKey","gql","useQueryPersistedFilterState","state","setState","useQueryPersistedState","encode","filterFields","reduce","acc","field","value","filters","JSON","stringify","decode","accum","parse","setters","forEach","fieldAsString","charAt","toUpperCase","slice","prevState","Function","JobMenu","job","isAssetJob","repoAddress","lastRun","runs","pipelineSelector","pipelineName","repositoryName","repositoryLocationName","location","materialize","useMaterializationAction","reexecute","useJobReexecution","permissions","canLaunchPipelineReexecution","canLaunchPipelineExecution","disabledReasons","usePermissionsForLocation","fetchHasExecutionPlan","queryResult","useLazyQuery","RUN_RE_EXECUTION_QUERY","fetchIfPossible","useCallback","executeItem","jsx_runtime","MenuItem","icon","text","disabled","loading","Spinner","purpose","onClick","e","MenuLink","workspacePipelinePath","repoName","repoLocation","isJob","path","reExecuteAllItem","canRunAllSteps","ReexecutionStrategy","ALL_STEPS","shiftKey","reExecuteFromFailureItem","canRunFromFailure","FROM_FAILURE","Fragment","launchpadElement","onOpened","Menu","Tooltip","display","Button","Icon","EXECUTION_PLAN_TO_GRAPH_FRAGMENT","TEMPLATE_COLUMNS","VirtualizedJobRow","forwardRef","ref","index","shouldQuery","useDelayedState","SINGLE_JOB_QUERY","selector","buildPipelineSelector","skip","useQueryRefreshAtInterval","FIFTEEN_SECONDS","pipeline","pipelineOrError","schedules","sensors","latestRuns","data-index","RowGrid","border","RowCell","style","maxWidth","whiteSpace","fontWeight","workspacePathFromAddress","MiddleTruncate","CaptionText","description","ScheduleSensorTagContainer","ScheduleOrSensorTag","LoadingOrNone","padding","top","RunStatusPezList","jobName","reverse","fade","marginTop","VirtualizedJobHeader","HeaderRow","templateColumns","sticky","HeaderCell","styled","withConfig","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","HorizontalControls","controls","className","styles","map","key","control","HoverButton","UnstyledButton","defaultRenderLink","href","a","ListItem","checked","onToggle","renderLink","left","right","Checkbox","format","onChange","target","link","children","dayjs","relativeTime","VirtualizedObserveJobRow","width","placement","Skeleton","$width","$height","startTime","TimeFromNow","unixTimestamp","AutomationButton","type","enabled","some","schedule","scheduleState","automations","sensor","sensorState","horizontal","forceCount","button","vertical","count","overflowX","background","strong","fontSize","overflowY","maxHeight","automation","ii","displayName","humanCronString","cronSchedule","longTimezoneName","executionTimezone","overflow","ScheduleSwitch","SensorSwitch","OverviewJobsTable","items","repos","flagUseNewObserveUIs","useFeatureFlags","parentRef","useRef","allKeys","repoAddressAsHumanString","expandedKeys","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","jobs","push","jobCount","repoKey","includes","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","row","TABLE_HEADER_HEIGHT","overscan","totalHeight","getTotalSize","getVirtualItems","Container","Inner","$totalHeight","transform","start","DynamicRepoRow","measureElement","expanded","showLocation","rightElement","FILTER_FIELDS","JobsPageContent","allRepos","visibleRepos","cachedData","useContext","WorkspaceContext","repoCount","repoBuckets","cachedEntries","Object","values","visibleKeys","visibleRepoKeys","buildBuckets","allJobs","flatMap","bucket","_state","codeLocations","buildRepoAddress","codeLocationFilter","useCodeLocationFilter","setCodeLocations","jobFilter","useStaticSetFilter","allValues","match","renderLabel","TruncatedTextWithFullTextOnHover","getStringValue","x","onStateChanged","setJobs","Array","from","filterButton","activeFiltersJsx","useFilters","filteredRepoBuckets","grow","SpinnerWithText","label","paddingTop","NonIdealState","title","entries","locationEntries","entry","locationOrLoadError","buckets","repo","repositories","pipelines","isHiddenAssetGroupJob","sortRepoBuckets","JobsRoot","useTrackPageView","useDocumentTitle","height","PageHeader","Heading","jobs_JobsRoot","sort","b","aString","bString","localeCompare","Set","option","repository","repositoryLocation","CancelRunButton","canTerminate","showDialog","setShowDialog","useState","closeDialog","onComplete","result","errors","error","showSharedToaster","message","TerminationDialog","isOpen","onClose","selectedRuns","stepSelectionWithState","selection","metadata","stepStates","keys","steps","IStepState","PREPARING","present","failed","FAILED","finished","every","SUCCEEDED","stepState","doneStatuses","executionPlan","RunActionButtons","graph","repoMatch","useRepositoryForRunWithParentSnapshot","jobError","useJobAvailabilityErrorForRun","flagAssetRetries","artifactsPersisted","currentRunSelection","stepSelectionFromRunTags","tags","find","t","DagsterTag","StepSelection","filterByQuery","all","k","currentRunIsFromFailure","IsResumeRetry","reexecuteWithSelection","pipelineSnapshotId","executionParams","getReexecutionParamsForSelection","full","scope","tooltip","same","StepSelectionDescription","selected","fromSelected","console","warn","Promise","resolve","selectionForPythonFiltering","join","selectionForUIFiltering","selectionKeys","filterRunSelectionByQuery","node","fromFailureEnabled","fromFailure","options","assetSelection","FROM_ASSET_FAILURE","Boolean","preferredRerun","primary","Group","spacing","LaunchButtonDropdown","runCount","hasReExecutePermission","DEFAULT_DISABLED_REASON","paddingLeft","span","RunStatusPez","opacity","RUN_STATUS_COLORS","Pez","$color","$opacity","max","unshift","fill","MAX_OPACITY","OverlayContainer","OverlayTitle","RunRow","CaptionMono","titleForRun","SummaryContainer","FontFamily","default","arguments","setVisible","setHidden","allRepoAddresses","visibleRepoAddresses","setVisibleRepos","menuWidth","BaseConfig","getKey","module","exports"],"sourceRoot":""}